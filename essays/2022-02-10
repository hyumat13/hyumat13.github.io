---
layout: essay
type: essay
title: The Art of Asking Questions
date: 2022-01-27
labels:
  - Software Engineering
  - Communication
---


When It comes to asking questions, I was never a student who was good at it or at least that was what I thought. Looking back at my history at school, I don't remember a single case where I raised my hand during class to ask a question. There were many times I didn't understand a certain concept or that the directions given were not clear enough. Every time that happens, I would think back at the question and I make sure over and over if the question I have is not a stupid or an RTFM question as defined in the essay "How To Ask Questions The Smart Way" by Eric Raymond (Here is the link to [How To Ask Questions The Smart Way](http://www.catb.org/esr/faqs/smart-questions.html)). Most of the time the double, triple, quadruple checking of my question would take up too much time leading me to the conclusion that I'm too late to ask. However, there are times where the checking would actually make me realize that I missed the information on the handout/text which is what makes me even more hesitant to ask.      

Looking deeper into smart and not so smart questions. I found examples of both of them in stackOverflow to use as references to make distinctions between the two. The first being an example of a not so smart question which can be accessed from here [Why first CSS variable resets when I change second?](https://stackoverflow.com/questions/65162567/why-first-css-variable-resets-when-i-change-second-custom-color-theme). The user was writing code to set custom colors for a site and wanted to know why one of the color values gets changed as the second one is changed. The biggest issue with this post was the overall lack of information describing the problem the user is facing. The post consists of just a few sentences and has a copy of the source code and makes an impression that the user is being lazy. Another issue is that the user is looking for answers to why the certain method does not work when there could be better and simpler ways to achieve the same thing. The post ends with an answer that kindly suggests to use a different method that seemed to have worked.

On to the smart question, the post can be accessed from here [Deep copy an array in Angular 2 + TypeScript](https://stackoverflow.com/questions/35504310/deep-copy-an-array-in-angular-2-typescript?noredirect=1&lq=1). This user is looking for a way to duplicate an input of arrays containing objects and change one property of it. The reason this is a smart question is because despite the question being fairly simple, the user managed to be short but precise not wasting the readers time and attention. The user shared source codes of the two methods that did not work when trying by themselves, indicating that the user has done some research and spent some time beforehand. The readers then were able to provide the user with a simple line of code that solved the issue. 

Asking smart questions show the people reading your post that you have respect for them making it likely for you to get some back. The questions will make not just the person asking, but the people helping you get smarter together. When I think about it, it's not so much different to everything else in life. The more you give, the more you are likely to get back. Looking at the fact that both the not so smart and the smart question was able to get an answer, the most important thing is probably the fact that you ask a question or not and I definitely need to work on that.

